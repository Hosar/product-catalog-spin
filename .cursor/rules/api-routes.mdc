---
globs: "src/app/api/**/*.ts"
description: "API Route Handler Guidelines"
---

# API Route Handler Guidelines

## Structure and Patterns
Based on existing API routes in [src/app/api/products/](mdc:src/app/api/products/):

### Route Handler Structure
```typescript
import { NextResponse } from 'next/server';
import pino from 'pino';

// Initialize logger
const logger = pino();

export async function GET() {
  try {
    // API logic here
    return NextResponse.json(data);
  } catch (error) {
    logger.error({ error }, 'Error message');
    return NextResponse.json(
      { error: 'User-friendly error message' },
      { status: 500 }
    );
  }
}
```

### Error Handling Standards
- **Always use try-catch blocks** for external API calls
- **Log errors with context** using structured logging (pino)
- **Return user-friendly error messages** in Spanish for this project
- **Use appropriate HTTP status codes** (400, 404, 500, etc.)

### External API Integration
- **DummyJSON API**: Primary data source for products
- **Handle network failures** gracefully
- **Validate response structure** before returning data
- **Implement proper timeout handling** for external calls

### Type Safety
```typescript
// Define interfaces for external API responses
interface Product {
  id: number;
  title: string;
  description: string;
  price: number;
  discountPercentage: number;
  rating: number;
  stock: number;
  brand: string;
  category: string;
  thumbnail: string;
  images: string[];
}

interface DummyJsonResponse {
  products: Product[];
  total: number;
  skip: number;
  limit: number;
}
```

### Logging Standards
- **Use structured logging** with pino
- **Include relevant context** in log messages
- **Log successful operations** for monitoring
- **Never log sensitive data** (API keys, user data)

### Response Format
- **Return consistent JSON structure**
- **Include proper Content-Type headers**
- **Handle CORS if needed** for external requests
- **Implement caching headers** when appropriate

### Example Implementation
```typescript
export async function GET() {
  try {
    const response = await fetch('https://dummyjson.com/products');
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data: DummyJsonResponse = await response.json();
    
    logger.info({ productCount: data.products.length }, 'Products fetched successfully');
    
    return NextResponse.json(data.products);
  } catch (error) {
    logger.error({ error }, 'Error fetching products from DummyJSON API');
    return NextResponse.json(
      { error: 'Error al cargar los productos' },
      { status: 500 }
    );
  }
}
```